begin
  require 'rspec/core/rake_task'
rescue LoadError
  puts "\nRspec 2 is required. Try this: \n\t`gem install rspec-core rspec-expectations`.\n\n"
  raise
end

vagrant_dir = File.join(File.dirname(__FILE__), 'vagrant')

desc "Deploy a fresh vagrant instance (destroying an existing instance)."
task :deploy do
  cd vagrant_dir do
    sh 'vagrant destroy'
    sh 'vagrant up'
  end
end

desc "Re-provision running instance from local chef cookbooks."
task :reprovision do
  cd vagrant_dir do
    sh 'vagrant provision'
  end
end

task :setup_ssh do
  cd vagrant_dir do
    sh "vagrant ssh_config > vagrant.ssh.config"
    ENV['SSH_CONFIG'] = File.expand_path('vagrant.ssh.config')
  end
end

RSpec::Core::RakeTask.new('system_spec') do |t|
  t.rspec_opts = ["--color", "--format documentation", "--require ./spec_helper.rb"]
  t.pattern = '*_spec.rb'
end
task 'system_spec' => 'setup_ssh'

desc "Run system specs on an existing instance."
task :default => 'system_spec'

desc "Deploy fresh instance and run system specs."
task :full => %w( deploy system_spec )

namespace :ec2 do
  task :manage_instance do
    require 'AWS'
    require 'pry'
    with_ec2_instance do |instance|
      pry
    end
  end
end

def with_ec2_instance
  ec2 = AWS::EC2::Base.new(
    :access_key_id => ENV['AMAZON_ACCESS_KEY_ID'],
    :secret_access_key => ENV['AMAZON_SECRET_ACCESS_KEY'])
  ami = "ami-7000f019" # Ubuntu 10.04 LTS Lucid instance-store from http://alestic.com/
  r = ec2.run_instances(
    :image_id => ami,
    :disable_api_termination => false,
    :instance_type => "c1.medium",
    :key_name => File.basename(ENV['RAPID_FTR_IDENTITY_FILE'], '.pem'))
  instance_id = r.instancesSet.item.first.instanceId
  instance = nil
  begin
    puts "Waiting for instance #{instance_id} to be running."
    sleep 8
    description = ec2.describe_instances(:instance_id => instance_id)
    instance = description.reservationSet.item[0].instancesSet.item[0]
    puts "Instance is #{instance.instanceState.name}"
  end while instance.instanceState.name != "running"

  # TODO: write ssh config file somewhat like Vagrant's
  # Host ec2
  #   HostName #{instance.dnsName}
  #   User ubuntu
  #   UserKnownHostsFile /dev/null
  #   StrictHostKeyChecking no
  #   PasswordAuthentication no
  #   IdentityFile #{File.expand_path(ENV['RAPID_FTR_IDENTITY_FILE'])}
  #   IdentitiesOnly yes

  yield instance

ensure
  puts "Terminating instance #{instance_id}."
  ec2.terminate_instances :instance_id => [instance_id]
end
